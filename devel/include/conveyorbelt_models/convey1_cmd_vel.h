// Generated by gencpp from file conveyorbelt_models/convey1_cmd_vel.msg
// DO NOT EDIT!


#ifndef CONVEYORBELT_MODELS_MESSAGE_CONVEY1_CMD_VEL_H
#define CONVEYORBELT_MODELS_MESSAGE_CONVEY1_CMD_VEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace conveyorbelt_models
{
template <class ContainerAllocator>
struct convey1_cmd_vel_
{
  typedef convey1_cmd_vel_<ContainerAllocator> Type;

  convey1_cmd_vel_()
    : linear()
    , angular()  {
    }
  convey1_cmd_vel_(const ContainerAllocator& _alloc)
    : linear(_alloc)
    , angular(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_type;
  _linear_type linear;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_type;
  _angular_type angular;





  typedef boost::shared_ptr< ::conveyorbelt_models::convey1_cmd_vel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::conveyorbelt_models::convey1_cmd_vel_<ContainerAllocator> const> ConstPtr;

}; // struct convey1_cmd_vel_

typedef ::conveyorbelt_models::convey1_cmd_vel_<std::allocator<void> > convey1_cmd_vel;

typedef boost::shared_ptr< ::conveyorbelt_models::convey1_cmd_vel > convey1_cmd_velPtr;
typedef boost::shared_ptr< ::conveyorbelt_models::convey1_cmd_vel const> convey1_cmd_velConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::conveyorbelt_models::convey1_cmd_vel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::conveyorbelt_models::convey1_cmd_vel_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace conveyorbelt_models

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'conveyorbelt_models': ['/home/tyrell/conveyorBelt_ws/src/conveyorbelt_models/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::conveyorbelt_models::convey1_cmd_vel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::conveyorbelt_models::convey1_cmd_vel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::conveyorbelt_models::convey1_cmd_vel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::conveyorbelt_models::convey1_cmd_vel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::conveyorbelt_models::convey1_cmd_vel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::conveyorbelt_models::convey1_cmd_vel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::conveyorbelt_models::convey1_cmd_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f195f881246fdfa2798d1d3eebca84a";
  }

  static const char* value(const ::conveyorbelt_models::convey1_cmd_vel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f195f881246fdfaULL;
  static const uint64_t static_value2 = 0x2798d1d3eebca84aULL;
};

template<class ContainerAllocator>
struct DataType< ::conveyorbelt_models::convey1_cmd_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "conveyorbelt_models/convey1_cmd_vel";
  }

  static const char* value(const ::conveyorbelt_models::convey1_cmd_vel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::conveyorbelt_models::convey1_cmd_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Vector3 linear\n\
geometry_msgs/Vector3 angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::conveyorbelt_models::convey1_cmd_vel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::conveyorbelt_models::convey1_cmd_vel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linear);
      stream.next(m.angular);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct convey1_cmd_vel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::conveyorbelt_models::convey1_cmd_vel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::conveyorbelt_models::convey1_cmd_vel_<ContainerAllocator>& v)
  {
    s << indent << "linear: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear);
    s << indent << "angular: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONVEYORBELT_MODELS_MESSAGE_CONVEY1_CMD_VEL_H
